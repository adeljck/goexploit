package shiroexploit

import (
	"crypto/tls"
	"github.com/go-resty/resty/v2"
	"goexploit/modules/common"
	"net/http"
	"net/url"
	"time"
)

func HttpRequest(target string, RememberMe string) *string {
	client := resty.New().SetTimeout(time.Duration(common.Args.TimeOut) * time.Second).SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})
	client.Header.Set("User-Agent", common.Args.UA)
	if common.Args.Proxy != "" {
		client.SetProxy(common.Args.Proxy)
	}
	client.SetRedirectPolicy(resty.RedirectPolicyFunc(func(req *http.Request, via []*http.Request) error {
		//disable http redirect
		return http.ErrUseLastResponse
	}))
	client.Header.Set("Cookie", "rememberMe="+RememberMe)
	resp, err := client.R().Get(target)
	if err != nil {
		return nil
	}
	SetCookieAll := resp.Header().Get("Set-Cookie")
	return &SetCookieAll
}
func HttpRequset(target string, RememberMe string) (bool, string) {
	var tr *http.Transport
	if common.Args.Proxy != "" {
		uri, _ := url.Parse(common.Args.Proxy)
		tr = &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			Proxy:           http.ProxyURL(uri),
		}
	} else {
		tr = &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}
	}
	client := &http.Client{
		Timeout:   time.Duration(common.Args.TimeOut) * time.Second,
		Transport: tr,
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse //不允许跳转
		}}
	req, err := http.NewRequest("GET", target, nil)
	if err != nil {
		return false, ""
	}
	req.Header.Set("User-Agent", common.Args.UA)
	req.Header.Set("Cookie", "rememberMe="+RememberMe)
	resp, err := client.Do(req)
	if err != nil {
		return false, ""
	}
	defer resp.Body.Close()
	//判断rememberMe=deleteMe;是否在响应头中
	var SetCookieAll string
	for i := range resp.Header["Set-Cookie"] {
		SetCookieAll += resp.Header["Set-Cookie"][i]
	}
	return true, SetCookieAll
}
